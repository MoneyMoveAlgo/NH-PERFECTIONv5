// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Not Human

// WHAT IT DOES AND HOW TO USE:
// In the Input page you configure the RSI
// 
// The indicator draws swings on the chart based on RSI extremes
// Example: Lines are draws from OVERSOLD to OVERBOUGHT and vice-versa
// If we keep geing in deeper OVERBOUGHT or OVERSOLD, the swinglines follow the price, till another cycle is complete
// In the labels you see the swing's relation to the structure: If the swing high is higher then the previous, it becomes Higher High aka HH


//@version=5
indicator('AryanAimbot ⌐', overlay=true, max_bars_back=1000)

// RSI Settings for user
rsiSource = input(title='RSI Source', defval=close)
rsiLength = input(title='RSI Length', defval=12)
rsiOverbought = input.int(title='RSI Overbought', defval=70, minval=51, maxval=100)
rsiOvesold = input.int(title='RSI Oversold', defval=30, minval=1, maxval=49)

// RSI value based on inbuilt RSI
rsiValue = ta.rsi(rsiSource, rsiLength)

// Get the current state
isOverbought = rsiValue >= rsiOverbought
isOversold = rsiValue <= rsiOvesold

// State of the last extreme 0 for initialization, 1 = overbought, 2 = oversold
var laststate = 0

// Highest and Lowest prices since the last state change
var hh = low
var ll = high

// Labels
var label labelll = na
var label labelhh = na

// Swing lines
var line line_up = na
var line line_down = na

var last_actual_label_hh_price = 0.0
var last_actual_label_ll_price = 0.0


// FUNCTIONS
obLabelText() =>
    if last_actual_label_hh_price < high
        'SELL LONG'
    else
        'SELL SHORT'
//plot(last_actual_label_hh_price)
osLabelText() =>
    if last_actual_label_ll_price < low
        'BUY LONG'
    else
        'BUY SHORT'

// Create oversold or overbought label
createOverBoughtLabel(isIt) =>
    if isIt
        label.new(x=bar_index, y=na, yloc=yloc.abovebar, style=label.style_label_down, color=color.red, size=size.tiny, text=obLabelText())
    else
        label.new(x=bar_index, y=na, yloc=yloc.belowbar, style=label.style_label_up, color=color.green, size=size.tiny, text=osLabelText())


// Move the oversold swing and label
moveOversoldLabel() =>
    label.set_x(labelll, bar_index)
    label.set_y(labelll, low)
    label.set_text(labelll, osLabelText())
    line.set_x1(line_down, bar_index)
    line.set_y1(line_down, low)

moveOverBoughtLabel() =>
    label.set_x(labelhh, bar_index)
    label.set_y(labelhh, high)
    label.set_text(labelhh, obLabelText())
    line.set_x1(line_up, bar_index)
    line.set_y1(line_up, high)

// We go from oversold straight to overbought NEW DRAWINGS CREATED HERE
if laststate == 2 and isOverbought
    hh := high
    labelhh := createOverBoughtLabel(true)
    last_actual_label_ll_price := label.get_y(labelll)
    labelll_ts = label.get_x(labelll)
    labelll_price = label.get_y(labelll)
    line_up := line.new(x1=bar_index, y1=high, x2=labelll_ts, y2=labelll_price, width=1)
    line_up

// We go from overbought straight to oversold  NEW DRAWINGS CREATED HERE
if laststate == 1 and isOversold
    ll := low
    labelll := createOverBoughtLabel(false)
    last_actual_label_hh_price := label.get_y(labelhh)
    labelhh_ts = label.get_x(labelhh)
    labelhh_price = label.get_y(labelhh)
    line_down := line.new(x1=bar_index, y1=high, x2=labelhh_ts, y2=labelhh_price, width=1)
    line_down


// If we are overbought
if isOverbought
    if high >= hh
        hh := high
        moveOverBoughtLabel()
    laststate := 1
    laststate

// If we are oversold
if isOversold
    if low <= ll
        ll := low
        moveOversoldLabel()
    laststate := 2
    laststate


// If last state was overbought and we are overbought
if laststate == 1 and isOverbought
    if hh <= high
        hh := high
        moveOverBoughtLabel()

//If we are oversold and the last state was oversold, move the drawings to the lowest price
if laststate == 2 and isOversold
    if low <= ll
        ll := low
        moveOversoldLabel()


// If last state was overbought
if laststate == 1
    if hh <= high
        hh := high
        moveOverBoughtLabel()

// If last stare was oversold
if laststate == 2
    if ll >= low
        ll := low
        moveOversoldLabel()


//NOW THIS IS S/R


toggleBreaks = input(true, title='Show Breaks')
leftBars = input(50, title='Left Bars ')
rightBars = input(50, title='Right Bars')
volumeThresh = input(10, title='Volume Threshold')
//
highUsePivot = fixnan(ta.pivothigh(leftBars, rightBars)[1])
lowUsePivot = fixnan(ta.pivotlow(leftBars, rightBars)[1])
r1 = plot(highUsePivot, color=ta.change(highUsePivot) ? na : #FF0000, linewidth=3, offset=-(rightBars + 1), title='Resistance')
s1 = plot(lowUsePivot, color=ta.change(lowUsePivot) ? na : #233dee, linewidth=3, offset=-(rightBars + 1), title='Support')

//Volume %
short = ta.ema(volume, 5)
long = ta.ema(volume, 10)
osc = 100 * (short - long) / long


//For breaks with volume
plotshape(toggleBreaks and ta.crossunder(close, lowUsePivot) and not(open - close < high - open) and osc > volumeThresh, title='Break', text='B', style=shape.labeldown, location=location.abovebar, color=color.new(color.red, 0), textcolor=color.new(color.white, 0), size=size.tiny)
plotshape(toggleBreaks and ta.crossover(close, highUsePivot) and not(open - low > close - open) and osc > volumeThresh, title='Break', text='B', style=shape.labelup, location=location.belowbar, color=color.new(color.green, 0), textcolor=color.new(color.white, 0), size=size.tiny)

//For bull / bear wicks
plotshape(toggleBreaks and ta.crossover(close, highUsePivot) and open - low > close - open, title='Break', text='Bull Wick', style=shape.labelup, location=location.belowbar, color=color.new(color.green, 0), textcolor=color.new(color.white, 0), size=size.tiny)
plotshape(toggleBreaks and ta.crossunder(close, lowUsePivot) and open - close < high - open, title='Break', text='Bear Wick', style=shape.labeldown, location=location.abovebar, color=color.new(color.red, 0), textcolor=color.new(color.white, 0), size=size.tiny)


alertcondition(ta.crossunder(close, lowUsePivot) and osc > volumeThresh, title='Support Broken', message='Support Broken')
alertcondition(ta.crossover(close, highUsePivot) and osc > volumeThresh, title='Resistance Broken', message='Resistance Broken')

//S/R CLOSED 


//Copyright
var tb = table.new(position.top_right, 1, 1
  , bgcolor = #35202b)

if barstate.isfirst 
    table.cell(tb, 0, 0, 'Scipt By @nothuman14'
      , text_size = size.small
      , text_color = #cc2f3c)
//Copyright CLOSED



//Trend Magic
//period = input(20, 'CCI period')
//coeff = input(1, 'ATR Multiplier')
//AP = input(5, 'ATR Period')
//ATR = ta.sma(ta.tr, AP)
//src = input(close)
//upT = low - ATR * coeff
//downT = high + ATR * coeff
//MagicTrend = 0.0
//MagicTrend := ta.cci(src, period) >= 0 ? upT < nz(MagicTrend[1]) ? nz(MagicTrend[1]) : upT : downT > nz(MagicTrend[1]) ? nz(MagicTrend[1]) : downT
//color1 = ta.cci(src, period) >= 0 ? #00fa9a : #dc143c
//plot(MagicTrend, color=color1, linewidth=1)
//alertcondition(ta.cross(close, MagicTrend), title='Cross Alert', message='Price - MagicTrend Crossing!')
//alertcondition(ta.crossover(low, MagicTrend), title='CrossOver Alarm', message='BUY SIGNAL!')
//alertcondition(ta.crossunder(high, MagicTrend), title='CrossUnder Alarm', message='SELL SIGNAL!')






// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © NOTHUMAN14

//@version=5

settings = "Settings"
zigzag_len = input.int(9, "ZigZag Length", group=settings)
show_zigzag = input.bool(true, "Show Zigzag", group=settings)
fib_factor = input.float(0.33, "Fib Factor for breakout confirmation", 0, 1, 0.01, group=settings)

tooltip_text = "Some timeframes may not be displayed in current timeframe. Zigzag lines only shows in current timeframe."
time_frame= input.string("Chart", "Timeframe", ["Chart", "5m", "15m", "30m", "1h", "2h", "4h", "D"], tooltip=tooltip_text)

tf = switch time_frame
    "5m" => "5"
    "15m" => "15"
    "30m" => "30"
    "1h" => "60"
    "2h" => "120"
    "4h" => "240"
    "D" => "D"
    => timeframe.period

text_size = input.string(size.tiny, "Text Size", [size.tiny, size.small, size.normal, size.large, size.huge])

bu_ob_inline_color = "Bu-OB Colors"
be_ob_inline_color = "Be-OB Colors"
bu_bb_inline_color = "Bu-BB Colors"
be_bb_inline_color = "Be-BB Colors"

bu_ob_display_settings = "Bu-OB Display Settings"
bu_ob_color = input.color(color.new(color.green, 70), "Color", group=bu_ob_display_settings, inline=bu_ob_inline_color)
bu_ob_border_color = input.color(color.green, "Border Color", group=bu_ob_display_settings, inline=bu_ob_inline_color)
bu_ob_text_color = input.color(color.green, "Text Color", group=bu_ob_display_settings, inline=bu_ob_inline_color)

be_ob_display_settings = "Be-OB Display Settings"
be_ob_color = input.color(color.new(color.red, 70), "Color", group=be_ob_display_settings, inline=be_ob_inline_color)
be_ob_border_color = input.color(color.red, "Border Color", group=be_ob_display_settings, inline=be_ob_inline_color)
be_ob_text_color = input.color(color.red, "Text Color", group=be_ob_display_settings, inline=be_ob_inline_color)

bu_bb_display_settings = "Bu-BB & Bu-MB Display Settings"
bu_bb_color = input.color(color.new(color.green, 70), "Color", group=bu_bb_display_settings, inline=bu_bb_inline_color)
bu_bb_border_color = input.color(color.green, "Border Color", group=bu_bb_display_settings, inline=bu_bb_inline_color)
bu_bb_text_color = input.color(color.green, "Text Color", group=bu_bb_display_settings, inline=bu_bb_inline_color)

be_bb_display_settings = "Be-BB & Be-MB Display Settings"
be_bb_color = input.color(color.new(color.red, 70), "Color", group=be_bb_display_settings, inline=be_bb_inline_color)
be_bb_border_color = input.color(color.red, "Border Color", group=be_bb_display_settings, inline=be_bb_inline_color)
be_bb_text_color = input.color(color.red, "Text Color", group=be_bb_display_settings, inline=be_bb_inline_color)


var float[] high_points_arr = array.new_float(5)
var int[] high_index_arr = array.new_int(5)
var float[] low_points_arr = array.new_float(5)
var int[] low_index_arr = array.new_int(5)

var box[] bu_ob_boxes = array.new_box(5)
var box[] be_ob_boxes = array.new_box(5)
var box[] bu_bb_boxes = array.new_box(5)
var box[] be_bb_boxes = array.new_box(5)

f_get_high(ind) =>
    [array.get(high_points_arr, array.size(high_points_arr) - 1 - ind), array.get(high_index_arr, array.size(high_index_arr) - 1 - ind)]

f_get_low(ind) =>
    [array.get(low_points_arr, array.size(low_points_arr) - 1 - ind), array.get(low_index_arr, array.size(low_index_arr) - 1 - ind)]

f_main1() =>
    to_up = high >= ta.highest(zigzag_len)
    to_down = low <= ta.lowest(zigzag_len)
    
    trend = 1
    trend := nz(trend[1], 1)
    trend := trend == 1 and to_down ? -1 : trend == -1 and to_up ? 1 : trend
    
    last_trend_up_since = ta.barssince(to_up[1])
    low_val = ta.lowest(nz(last_trend_up_since > 0 ? last_trend_up_since : 1, 1))
    low_index = bar_index - ta.barssince(low_val == low)
    
    last_trend_down_since = ta.barssince(to_down[1])
    high_val = ta.highest(nz(last_trend_down_since > 0 ? last_trend_down_since : 1, 1))
    high_index = bar_index - ta.barssince(high_val == high)
    
    if ta.change(trend) != 0
        if trend == 1
            array.push(low_points_arr, low_val)
            array.push(low_index_arr, low_index)
        if trend == -1
            array.push(high_points_arr, high_val)
            array.push(high_index_arr, high_index)
    
    [h0, h0i] = f_get_high(0)
    [h1, h1i] = f_get_high(1)
    
    [l0, l0i] = f_get_low(0)
    [l1, l1i] = f_get_low(1)
    
    market = 1
    market := nz(market[1], 1)
    last_l0 = ta.valuewhen(ta.change(market) != 0, l0, 0)
    last_h0 = ta.valuewhen(ta.change(market) != 0, h0, 0)
    market := last_l0 == l0 or last_h0 == h0 ? market : market == 1 and l0 < l1 and l0 < l1 - math.abs(h0 - l1) * fib_factor ? -1 : market == -1 and h0 > h1 and h0 > h1 + math.abs(h1 - l0) * fib_factor ? 1 : market
    
    // For alert
    alert_market = 1
    alert_market := nz(alert_market[1], 1)
    alert_market := last_l0 == l0 or last_h0 == h0 ? alert_market : alert_market == 1 and trend == -1 and close < l0 and close < l0 - math.abs(h0 - l0) * fib_factor ? -1 : alert_market == -1 and trend == 1 and close > h0 and close > h0 + math.abs(h0 - l0) * fib_factor ? 1 : alert_market
    
    bu_ob_index = bar_index
    bu_ob_index := nz(bu_ob_index[1], bar_index)
    for i=h1i to l0i[zigzag_len]
        index = bar_index - i 
        if open[index] > close[index]
            bu_ob_index := bar_index[index]
    
    bu_ob_since = bar_index - bu_ob_index
    
    be_ob_index = bar_index
    be_ob_index := nz(be_ob_index[1], bar_index)
    for i=l1i to h0i[zigzag_len]
        index = bar_index - i 
        if open[index] < close[index]
            be_ob_index := bar_index[index]
    
    be_ob_since = bar_index - be_ob_index
    
    be_bb_index = bar_index
    be_bb_index := nz(be_bb_index[1], bar_index)
    for i=h1i - zigzag_len to l1i
        index = bar_index - i
        if open[index] > close[index]
            be_bb_index := bar_index[index]
    
    be_bb_since = bar_index - be_bb_index
    
    bu_bb_index = bar_index
    bu_bb_index := nz(bu_bb_index[1], bar_index)
    for i=l1i - zigzag_len to h1i
        index = bar_index - i
        if open[index] < close[index]
            bu_bb_index := bar_index[index]
    
    bu_bb_since = bar_index - bu_bb_index
    
    
    bu_ob_since_high = high[bu_ob_since]
    bu_ob_since_low = low[bu_ob_since]
    be_ob_since_high = high[be_ob_since]
    be_ob_since_low = low[be_ob_since]
    be_bb_since_high = high[be_bb_since]
    be_bb_since_low = low[be_bb_since]
    bu_bb_since_high = high[bu_bb_since]
    bu_bb_since_low = low[bu_bb_since]
    
    [trend, h0i, h0, l0i, l0, market, h1i, h1, l1i, l1, bu_ob_since_high, bu_ob_since_low, be_ob_since_high, be_ob_since_low]
    

f_main2() =>
    to_up = high >= ta.highest(zigzag_len)
    to_down = low <= ta.lowest(zigzag_len)
    
    trend = 1
    trend := nz(trend[1], 1)
    trend := trend == 1 and to_down ? -1 : trend == -1 and to_up ? 1 : trend
    
    last_trend_up_since = ta.barssince(to_up[1])
    low_val = ta.lowest(nz(last_trend_up_since > 0 ? last_trend_up_since : 1, 1))
    low_index = bar_index - ta.barssince(low_val == low)
    
    last_trend_down_since = ta.barssince(to_down[1])
    high_val = ta.highest(nz(last_trend_down_since > 0 ? last_trend_down_since : 1, 1))
    high_index = bar_index - ta.barssince(high_val == high)
    
    if ta.change(trend) != 0
        if trend == 1
            array.push(low_points_arr, low_val)
            array.push(low_index_arr, low_index)
        if trend == -1
            array.push(high_points_arr, high_val)
            array.push(high_index_arr, high_index)
    
    [h0, h0i] = f_get_high(0)
    [h1, h1i] = f_get_high(1)
    
    [l0, l0i] = f_get_low(0)
    [l1, l1i] = f_get_low(1)
    
    market = 1
    market := nz(market[1], 1)
    last_l0 = ta.valuewhen(ta.change(market) != 0, l0, 0)
    last_h0 = ta.valuewhen(ta.change(market) != 0, h0, 0)
    market := last_l0 == l0 or last_h0 == h0 ? market : market == 1 and l0 < l1 and l0 < l1 - math.abs(h0 - l1) * fib_factor ? -1 : market == -1 and h0 > h1 and h0 > h1 + math.abs(h1 - l0) * fib_factor ? 1 : market
    
    // For alert
    alert_market = 1
    alert_market := nz(alert_market[1], 1)
    alert_market := last_l0 == l0 or last_h0 == h0 ? alert_market : alert_market == 1 and trend == -1 and close < l0 and close < l0 - math.abs(h0 - l0) * fib_factor ? -1 : alert_market == -1 and trend == 1 and close > h0 and close > h0 + math.abs(h0 - l0) * fib_factor ? 1 : alert_market
    
    bu_ob_index = bar_index
    bu_ob_index := nz(bu_ob_index[1], bar_index)
    for i=h1i to l0i[zigzag_len]
        index = bar_index - i 
        if open[index] > close[index]
            bu_ob_index := bar_index[index]
    
    bu_ob_since = bar_index - bu_ob_index
    
    be_ob_index = bar_index
    be_ob_index := nz(be_ob_index[1], bar_index)
    for i=l1i to h0i[zigzag_len]
        index = bar_index - i 
        if open[index] < close[index]
            be_ob_index := bar_index[index]
    
    be_ob_since = bar_index - be_ob_index
    
    be_bb_index = bar_index
    be_bb_index := nz(be_bb_index[1], bar_index)
    for i=h1i - zigzag_len to l1i
        index = bar_index - i
        if open[index] > close[index]
            be_bb_index := bar_index[index]
    
    be_bb_since = bar_index - be_bb_index
    
    bu_bb_index = bar_index
    bu_bb_index := nz(bu_bb_index[1], bar_index)
    for i=l1i - zigzag_len to h1i
        index = bar_index - i
        if open[index] < close[index]
            bu_bb_index := bar_index[index]
    
    bu_bb_since = bar_index - bu_bb_index
    
    
    bu_ob_since_high = high[bu_ob_since]
    bu_ob_since_low = low[bu_ob_since]
    be_ob_since_high = high[be_ob_since]
    be_ob_since_low = low[be_ob_since]
    be_bb_since_high = high[be_bb_since]
    be_bb_since_low = low[be_bb_since]
    bu_bb_since_high = high[bu_bb_since]
    bu_bb_since_low = low[bu_bb_since]
    
    [alert_market, be_bb_since_high, be_bb_since_low, bu_bb_since_high, bu_bb_since_low, bu_ob_index, bu_bb_index, be_ob_index, be_bb_index]


[trend, h0i, h0, l0i, l0, market, h1i, h1, l1i, l1, bu_ob_since_high, bu_ob_since_low, be_ob_since_high, be_ob_since_low] = request.security(syminfo.tickerid, tf, f_main1())
[alert_market, be_bb_since_high, be_bb_since_low, bu_bb_since_high, bu_bb_since_low, bu_ob_index, bu_bb_index, be_ob_index, be_bb_index] = request.security(syminfo.tickerid, tf, f_main2())

// Be_bb_since olanlar değişecek be_ob_index ler eklenecek

if ta.change(trend) != 0 and show_zigzag
    if trend == 1
        line.new(h0i, h0, l0i, l0)
    if trend == -1
        line.new(l0i, l0, h0i, h0)

if ta.change(market) != 0
    if market == 1
        line.new(h1i, h1, h0i, h1, color=color.green, width=2)
        label.new(int(math.avg(h1i, l0i)), h1, "MSB", color=color.new(color.black, 100), style=label.style_label_down, textcolor=color.green, size=size.small)
        bu_ob = box.new(bu_ob_index, bu_ob_since_high, bar_index + 10, bu_ob_since_low, bgcolor=bu_ob_color, border_color=bu_ob_border_color, text="SUPPORT ZONE", text_color=bu_ob_text_color, text_halign=text.align_right, text_size=text_size)
        bu_bb = box.new(bu_bb_index, bu_bb_since_high, bar_index + 10, bu_bb_since_low, bgcolor=bu_bb_color, border_color=bu_bb_border_color, text=l0 < l1 ? "SUPPORT" : "SUPPORT", text_color=bu_bb_text_color, text_halign=text.align_right, text_size=text_size)
        array.push(bu_ob_boxes, bu_ob)
        array.push(bu_bb_boxes, bu_bb)
    if market == -1
        line.new(l1i, l1, l0i, l1, color=color.red, width=2)
        label.new(int(math.avg(l1i, h0i)), l1, "MSB", color=color.new(color.black, 100), style=label.style_label_up, textcolor=color.red, size=size.small)
        be_ob = box.new(be_ob_index, be_ob_since_high, bar_index + 10, be_ob_since_low, bgcolor=be_ob_color, border_color=be_ob_border_color, text="RESISTANCE ZONE", text_color=be_ob_text_color, text_halign=text.align_right, text_size=text_size)
        be_bb = box.new(be_bb_index, be_bb_since_high, bar_index + 10, be_bb_since_low, bgcolor=be_bb_color, border_color=be_bb_border_color, text=h0 > h1 ? "RESISTANCE" : "RESISTANCE ", text_color=be_bb_text_color, text_halign=text.align_right, text_size=text_size)
        array.push(be_ob_boxes, be_ob)
        array.push(be_bb_boxes, be_bb)

for bull_ob in bu_ob_boxes
    bottom = box.get_bottom(bull_ob)
    if close < bottom
        box.delete(bull_ob)
    else if array.size(bu_ob_boxes) == 5
        box.delete(array.shift(bu_ob_boxes))
    else
        box.set_right(bull_ob, bar_index + 10)
    
for bear_ob in be_ob_boxes
    top = box.get_top(bear_ob)
    if close > top
        box.delete(bear_ob)
    else if array.size(be_ob_boxes) == 5
        box.delete(array.shift(be_ob_boxes))
    else
        box.set_right(bear_ob, bar_index + 10)
        
for bear_bb in be_bb_boxes
    top = box.get_top(bear_bb)
    if close > top
        box.delete(bear_bb)
    else if array.size(be_bb_boxes) == 5
        box.delete(array.shift(be_bb_boxes))
    else
        box.set_right(bear_bb, bar_index + 10)
        
for bull_bb in bu_bb_boxes
    bottom = box.get_bottom(bull_bb)
    if close < bottom
        box.delete(bull_bb)
    else if array.size(bu_bb_boxes) == 5
        box.delete(array.shift(bu_bb_boxes))
    else
        box.set_right(bull_bb, bar_index + 10)
        
if ta.change(alert_market) != 0
    alert("MSB", alert.freq_once_per_bar)
    
    
    
    //NEW EDITION


//@version=5


// modified by stevenhq from the script by zonedoutdad who modified the script by ChrisMoody
// Label drawing code from PineCoders
// stevenhq:
//	Converted to Pine Script v4
// 	Added option to show previous time frames (default is off)
// 	Added label with the plot time frame name
//@version=5
//@author=Aryan Singh
// title
// Price levels

// Year
yearOpen = request.security(syminfo.tickerid, '12M', open, lookahead=barmerge.lookahead_on)
yearHigh = request.security(syminfo.tickerid, '12M', high, lookahead=barmerge.lookahead_on)
yearLow = request.security(syminfo.tickerid, '12M', low, lookahead=barmerge.lookahead_on)
yearMid = math.avg(yearHigh, yearLow)

// Month
monthOpen = request.security(syminfo.tickerid, 'M', open, lookahead=barmerge.lookahead_on)
monthHigh = request.security(syminfo.tickerid, 'M', high, lookahead=barmerge.lookahead_on)
monthLow = request.security(syminfo.tickerid, 'M', low, lookahead=barmerge.lookahead_on)
monthMid = math.avg(monthHigh, monthLow)

// Day
dayOpen = request.security(syminfo.tickerid, 'D', open, lookahead=barmerge.lookahead_on)
dayHigh = request.security(syminfo.tickerid, 'D', high, lookahead=barmerge.lookahead_on)
dayLow = request.security(syminfo.tickerid, 'D', low, lookahead=barmerge.lookahead_on)
dayClose = request.security(syminfo.tickerid, 'D', close, lookahead=barmerge.lookahead_on)
dayMid = math.avg(dayHigh, dayLow)

// Easy configuration
yearColor = #f57f17
yearTransp = 50
yearLabel = 'Year'

monthColor = color.gray
monthTransp = 50
monthLabel = 'Month'

mondayColor = color.gray
mondayTransp = 50
mondayLabel = 'Monday'

// —————————— Inputs
plotYearly = input(title='Plot ' + yearLabel, defval=true)
plotMonthly = input(title='Plot ' + monthLabel, defval=true)
plotMonday = input(title='Plot ' + mondayLabel, defval=true)
showMid = input(title='Show Mid Points', defval=false)
showPrevPeriods = input(title='Plot Previous Periods', defval=false)


//function which is called by plot to establish day of the week is monday return true or false
isMonday() =>
    dayofweek(time('D')) == dayofweek.monday ? 1 : 0

// Set initial values to 0
mondayOpen = 0.0
mondayHigh = 0.0
mondayLow = 0.0
mondayClose = 0.0
mondayMid = 0.0

mondayOpen := isMonday() ? dayOpen : mondayOpen[1]
mondayHigh := isMonday() ? dayHigh : mondayHigh[1]
mondayLow := isMonday() ? dayLow : mondayLow[1]
mondayClose := isMonday() ? dayClose : mondayClose[1]
mondayMid := isMonday() ? dayMid : mondayMid[1]


// ————— Print a label at end of the chart
f_lineLabel(_line, _barsBack, _color, _text) =>
    var label _lbl = na
    if barstate.islast
        if na(_lbl)
            // Only create label once.
            //_lbl := label.new(bar_index[_barsBack], _line[_barsBack], xloc = xloc.bar_index, yloc = yloc.price, text = _text +"\n" + tostring(_line[_barsBack]), color = _color, textcolor = #FFFFFFff)
            _lbl := label.new(bar_index[_barsBack], _line[_barsBack], xloc=xloc.bar_index, yloc=yloc.price, text='                      ' + _text, textcolor=_color, size=size.small, style=label.style_none)
            // Fudge return type of `if` block so compiler doesn't complain (thx midtownsk8rguy for the trick).
            int(na)
        else
            // Rather than delete and recreate the label on every realtime bar update, update the label's information; it's more efficient.
            label.set_xy(_lbl, bar_index[_barsBack], _line[_barsBack])
            label.set_text(_lbl, _text)
            label.set_color(_lbl, _color)
            int(na)

isThisYear = showPrevPeriods
if year(timenow) == year(time)
    isThisYear := true
    isThisYear

isThisMonth = showPrevPeriods
if year(timenow) == year(time) and month(timenow) == month(time)
    isThisMonth := true
    isThisMonth

isThisWeek = showPrevPeriods
if year(timenow) == year(time) and month(timenow) == month(time) and weekofyear(timenow) == weekofyear(time)
    isThisWeek := true
    isThisWeek


// —————————— Plot Time Frames

//Yearly Plots
plot(plotYearly and isThisYear ? yearOpen : na, title=yearLabel + ' Open', style=plot.style_line, linewidth=3, color=yearColor, transp=yearTransp)
plot(plotYearly and isThisYear ? yearHigh : na, title=yearLabel + ' High', style=plot.style_circles, linewidth=2, color=yearColor, transp=yearTransp)
plot(plotYearly and isThisYear ? yearLow : na, title=yearLabel + ' Low', style=plot.style_circles, linewidth=2, color=yearColor, transp=yearTransp)
plot(plotYearly and isThisYear and showMid ? yearMid : na, title=yearLabel + ' Mid', style=plot.style_circles, linewidth=2, color=yearColor, transp=yearTransp)

//Monthly Plots
plot(plotMonthly and isThisMonth ? monthOpen : na, title=monthLabel + ' Open', style=plot.style_line, linewidth=2, color=monthColor, transp=monthTransp)
plot(plotMonthly and isThisMonth ? monthHigh : na, title=monthLabel + ' High', style=plot.style_circles, linewidth=2, color=monthColor, transp=monthTransp)
plot(plotMonthly and isThisMonth ? monthLow : na, title=monthLabel + ' Low', style=plot.style_circles, linewidth=2, color=monthColor, transp=monthTransp)
plot(plotMonthly and isThisMonth and showMid ? monthMid : na, title=monthLabel + ' Mid', style=plot.style_circles, linewidth=2, color=monthColor, transp=monthTransp)

//Monday Plots
plot(plotMonday and isThisWeek ? mondayOpen : na, title=mondayLabel + ' Open', style=plot.style_line, linewidth=1, color=mondayColor, transp=mondayTransp)
plot(plotMonday and isThisWeek ? mondayHigh : na, title=mondayLabel + ' High', style=plot.style_circles, linewidth=1, color=mondayColor, transp=mondayTransp)
plot(plotMonday and isThisWeek ? mondayLow : na, title=mondayLabel + ' Low', style=plot.style_circles, linewidth=1, color=mondayColor, transp=mondayTransp)
plot(plotMonday and isThisWeek and showMid ? mondayMid : na, title=mondayLabel + ' Mid', style=plot.style_circles, linewidth=1, color=mondayColor, transp=mondayTransp)


// —————————— Plot labels
if plotYearly
    f_lineLabel(yearOpen, 0, color.new(yearColor, yearTransp), yearLabel + ' Open')
    f_lineLabel(yearHigh, 0, color.new(yearColor, yearTransp), yearLabel + ' High')
    f_lineLabel(yearLow, 0, color.new(yearColor, yearTransp), yearLabel + ' Low')
    if showMid
        f_lineLabel(yearMid, 0, color.new(yearColor, yearTransp), yearLabel + ' Mid')

if plotMonthly
    f_lineLabel(monthOpen, 0, color.new(monthColor, monthTransp), monthLabel + ' Open')
    f_lineLabel(monthHigh, 0, color.new(monthColor, monthTransp), monthLabel + ' High')
    f_lineLabel(monthLow, 0, color.new(monthColor, monthTransp), monthLabel + ' Low')
    if showMid
        f_lineLabel(monthMid, 0, color.new(monthColor, monthTransp), monthLabel + ' Mid')

if plotMonday
    f_lineLabel(mondayOpen, 0, color.new(mondayColor, mondayTransp), mondayLabel + ' Open')
    f_lineLabel(mondayHigh, 0, color.new(mondayColor, mondayTransp), mondayLabel + ' High')
    f_lineLabel(mondayLow, 0, color.new(mondayColor, mondayTransp), mondayLabel + ' Low')
    if showMid
        f_lineLabel(mondayMid, 0, color.new(mondayColor, mondayTransp), mondayLabel + ' Mid')


